<div id="BondPad" data-tchmi-type="TcHmi.Controls.System.TcHmiUserControl" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%" data-tchmi-creator-viewport-width="500" data-tchmi-creator-viewport-height="500">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%i%selectedRecipe::nMaxRow%/i%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": false,
        "sourceLines": [
          "TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxColumn%/i%\", function(colData){",
          "  TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxRow%/i%\", function(rowData){",
          "    const rowSize = rowData.value;",
          "    const colSize = colData.value;",
          "",
          "    const control = TcHmi.Symbol.readEx(\"%ctrl%BondPad%/ctrl%\");",
          "    const container = control.getElement(); //获取dom",
          "    const $container = jQuery(container).children().first();",
          "    if(! $container.hasClass(\"analog-discs-grid-container\")){",
          "      $container.addClass(\"analog-discs-grid-container\");",
          "    }",
          "    $container.css(\"--row\", rowSize);",
          "    $container.css(\"--col\", colSize);",
          "    $container.empty();",
          "    ",
          "    for(i = 0; i < rowSize; i++) {",
          "      for(j = 0; j < colSize; j++) {",
          "        var element = jQuery(\"<div class='analog-discs-grid-item'></div>\");",
          "        element.attr({\"rowIndex\": i, \"colIndex\": j, \"status\": 1});",
          "        $container.append(element);",
          "      }",
          "    }",
          "  });",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      },
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxColumn%/i%\", function(colData){",
          "  TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxRow%/i%\", function(rowData){",
          "    const rowSize = rowData.value;",
          "    const colSize = colData.value;",
          "",
          "    if (rowSize == undefined || colSize == undefined || rowSize == null || colSize == null)",
          "        return;",
          "",
          "    const control = TcHmi.Symbol.readEx(\"%ctrl%BondPad%/ctrl%\");",
          "    const container = control.getElement(); //获取dom",
          "    const $container = jQuery(container).children().first();",
          "    $container.empty();",
          "    if(! $container.hasClass(\"analog-discs-grid-container\")){",
          "      $container.addClass(\"analog-discs-grid-container\");",
          "    }",
          "",
          "",
          "    var max = rowSize > colSize ? rowSize : colSize;",
          "    var container_width = $container.width();",
          "    var element_width = container_width / max;",
          "    ",
          "    var col_elems = []",
          "    for (var c = 0; c < colSize; c++) {",
          "        var col_elem = document.createElement(\"span\");",
          "        col_elem.className = \"col\"",
          "        col_elem.style = `width: ${element_width}px; height: ${container_width}px; float: left;`",
          "        $container.append(col_elem);",
          "        col_elems.push(col_elem);",
          "      }",
          "",
          "    for (var c = 0; c < colSize; c++) {",
          "        for (var r = 0; r < rowSize; r++) {",
          "          var elem = document.createElement(\"div\");",
          "          elem.style = `width: ${element_width}px; height: ${element_width}px;`",
          "          elem.className = \"analog-discs-grid-item\";",
          "          elem.setAttribute(\"rowIndex\", r);",
          "          elem.setAttribute(\"colIndex\", c);",
          "          elem.setAttribute(\"status\", 1);",
          "          col_elems[c].append(elem);",
          "        }",
          "    }",
          "  });",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  },
  {
    "event": "%i%selectedRecipe::nMaxColumn%/i%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": false,
        "sourceLines": [
          "TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxColumn%/i%\", function(colData){",
          "  TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxRow%/i%\", function(rowData){",
          "    const rowSize = rowData.value;",
          "    const colSize = colData.value;",
          "",
          "    const control = TcHmi.Symbol.readEx(\"%ctrl%BondPad%/ctrl%\");",
          "    const container = control.getElement(); //获取dom",
          "    const $container = jQuery(container).children().first();",
          "    if(! $container.hasClass(\"analog-discs-grid-container\")){",
          "      $container.addClass(\"analog-discs-grid-container\");",
          "    }",
          "    $container.css(\"--row\", rowSize);",
          "    $container.css(\"--col\", colSize);",
          "    $container.empty();",
          "    ",
          "    for(i = 0; i < rowSize; i++) {",
          "      for(j = 0; j < colSize; j++) {",
          "        var element = jQuery(\"<div class='analog-discs-grid-item'></div>\");",
          "        element.attr({\"rowIndex\": i, \"colIndex\": j, \"status\": 1});",
          "        $container.append(element);",
          "      }",
          "    }",
          "  });",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      },
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxColumn%/i%\", function(colData){",
          "  TcHmi.Symbol.readEx2(\"%i%selectedRecipe::nMaxRow%/i%\", function(rowData){",
          "    const rowSize = rowData.value;",
          "    const colSize = colData.value;",
          "",
          "    if (rowSize == undefined || colSize == undefined || rowSize == null || colSize == null)",
          "        return;",
          "",
          "    const control = TcHmi.Symbol.readEx(\"%ctrl%BondPad%/ctrl%\");",
          "    const container = control.getElement(); //获取dom",
          "    const $container = jQuery(container).children().first();",
          "    $container.empty();",
          "    if(! $container.hasClass(\"analog-discs-grid-container\")){",
          "      $container.addClass(\"analog-discs-grid-container\");",
          "    }",
          "",
          "",
          "    var max = rowSize > colSize ? rowSize : colSize;",
          "    var container_width = $container.width();",
          "    var element_width = container_width / max;",
          "    ",
          "    var col_elems = []",
          "    for (var c = 0; c < colSize; c++) {",
          "        var col_elem = document.createElement(\"span\");",
          "        col_elem.className = \"col\"",
          "        col_elem.style = `width: ${element_width}px; height: ${container_width}px; float: left;`",
          "        $container.append(col_elem);",
          "        col_elems.push(col_elem);",
          "      }",
          "",
          "    for (var c = 0; c < colSize; c++) {",
          "        for (var r = 0; r < rowSize; r++) {",
          "          var elem = document.createElement(\"div\");",
          "          elem.style = `width: ${element_width}px; height: ${element_width}px;`",
          "          elem.className = \"analog-discs-grid-item\";",
          "          elem.setAttribute(\"rowIndex\", r);",
          "          elem.setAttribute(\"colIndex\", c);",
          "          elem.setAttribute(\"status\", 1);",
          "          col_elems[c].append(elem);",
          "        }",
          "    }",
          "  });",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-class-names" type="application/json">
[
  "bondPad"
]
</script>
</div>